# infix FFI Generative Test Signatures
#
# Format:  args... => ret_type
#
# Primitives (based on Itanium C++ ABI mangling):
#   v: void
#   b: bool
#   a: signed char          c: char               h: unsigned char
#   s: short                t: unsigned short
#   i: int                  j: unsigned int
#   l: long                 m: unsigned long
#   x: long long            y: unsigned long long
#   n: __int128_t           o: __uint128_t
#   f: float
#   d: double               e: long double
#
# Composites:
#   {...}: standard struct    p(...){...}: packed struct
#   <...>: union              [#]T: array
#   T*: pointer to T          (...=>...): function pointer
#
# Delimiters:
#   ; : Separates fixed from variadic args in function pointers (e.g., c*;i,d=>i)
#   , : Separates members in structs/unions/args (e.g., {i,j,f})
#

# Section 1: All Primitive Types
# -------------------------------
i => i
d => d
f => f
c => c
s => s
x => x
j => j
h => h
t => t
y => y
m => m
a => a
e => e
b => b
n => n
o => o
v => v
i => v
v => i

# Section 2: Pointers
# --------------------
# Basic and multi-level pointers
c* => c*
v => i**
x** => x**
v*** => v
# Pointers to all primitives
v => a*
b* => s*
t* => h*
j* => i*
l* => m*
x* => y*
n* => o*
f* => d*
e* => v*

# Section 3: Standard Structs
# ----------------------------
# Pass by value (small)
{i,j} => {c,s}
# Pass by value (large, may be passed by reference on some ABIs)
{x,x,x,x} => {d,d,d,d}
# Pass by pointer
{i,j}* => {c,s}*
# Nested structs
{i,{d,x}} => v
v => {c,{i,[2]j},s}
{i,{c*}}* => v*
# Structs with array and pointer members
{[4]i,c*} => v
v => {[2]d,j*}
{i,[8]j,c**}* => i

# Section 4: Packed Structs (p(...){...})
# -----------------------------------
# Simple packed struct by value (note size/alignment differences from standard)
p(5,1){c@0,i@1} => v
v => p(9,1){c@0,x@1}
p(19,1){c@0,s@1,i@3,l@7,x@11} => p(19,1){c@0,s@1,i@3,l@7,x@11}
# Pointer to packed struct
p(5,1){c@0,i@1}* => v
v => p(9,1){c@0,x@1}*
# Nested packed structs
p(5,1){s@0,p(2,1){c@0,i@1}@2,h@4} => v
v => p(13,1){c@0,p(9,1){s@0,d@1}@1}
# Standard struct inside a packed struct
p(17,1){c@0,{i,d}@1,s@15} => v
# Packed struct inside a standard struct
{i,p(3,1){c@0,s@1},j} => v
# Return pointer to a packed struct
v => p(12,4){j@0,d@4}*
# Pointer to pointer to packed struct
p(3,1){c@0,s@1}** => v

# Section 5: Unions
# ------------------
<i,f,d> => <l,x,e>
<i,f,d>* => <l,x,e>*
# Complex unions with structs (standard and packed) and arrays
<{i,j},d> => v
v => <[4]i,c*>
<p(5,1){c@0,i@1},{d,f}>* => v

# Section 6: Arrays
# ------------------
# Arrays of primitives
[10]i => v
v => [4]d
[2]e => [2]e
# Pointers to arrays
([10]i)* => v
v => ([4]d)*
# Arrays of standard structs
[4]{i,j} => v
v => [2]{c*}
# Arrays of packed structs
[8]p(5,1){c@0,i@1} => v
v => [4]p(9,1){c@0,x@1}
# Array of pointers to packed structs
[4]p(5,1){c@0,i@1}* => v

# Section 7: Function Pointers (Callbacks)
# -----------------------------------------
# Simple callbacks
(i=>j) => v
v => (v=>v)
(j=>j) => (i=>i)
# Complex callbacks with structs and pointers
({i,j}=>{c,h}) => v
v => (p(3,1){c@0,s@1}*=>j*)
({i,j}*=>{c,h}*) => ({i,j}*=>{c,h}*)
# Return a pointer to a function pointer
v => (i=>j)*
# Struct containing a callback
{i,(d*=>v*),j} => v

# Section 8: Variadic Functions
# ------------------------------
c*;i,d => i
i,f;e,x => v
# Variadic with structs and pointers
i;{c,s},d,j* => v
l;p(5,1){c@0,i@1},f* => v

# Section 9: ABI-Specific Aggregate Passing
# ------------------------------------------
# Structs of only floats/doubles (often passed in FP registers)
{f} => {f}
{f,f} => {f,f}
{d,d} => {d,d}
{f,f,f,f} => v
{d,d,d,d} => v
# Mixed integer and float members
{i,f} => {i,f}
{f,i} => v
# Alignment and padding tests
{c,x} => v
{x,c} => v
p(9,1){c@0,x@1} => v
p(9,1){x@0,c@8} => v

# Section 10: Register Spilling
# ------------------------------
# Test integer/pointer register spilling (e.g., > 6 GPRs on SysV x86-64)
i,i,i,i,i,i => v
i,i,i,i,i,i,i => v
c*,c*,c*,c*,c*,c* => v
c*,c*,c*,c*,c*,c*,c* => v
# Test floating-point register spilling (e.g., > 8 SSE regs on SysV x86-64)
d,d,d,d,d,d,d,d => v
d,d,d,d,d,d,d,d,d => v
# Mixed spilling
i,i,i,f,f,d,d,d,i,i,i,f,f,d,d,d => v

# Section 11: Kitchen Sink - Complex Combinations
# -----------------------------------------------
# Take a pointer to a struct containing a union of an array of packed structs
# and a function pointer, and return a packed struct.
({i,<[4]p(3,1){c@0,s@1},(v=>v)>}*) => p(16,8){d@0,d@8}
# Take a callback that takes a packed struct, and return a pointer to an
# array of 4 standard structs.
((p(5,1){c@0,i@1}=>v)) => ([4]{x,y})*
# The ultimate stress test
p(9,1){c@0,([2]i)*}* => <(v=>p(5,1){i@0,j@4}*),{c,d,e,f,[2]p(19,1){a@0,b@1,h@2,s@3,t@5,i@7,j@11,l@15,m@19}}>*
